<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BwYECAcFCAcFCAcFCAcFCAcFCAcFCAcFBwYEAQAAm3Q6l3RAAAAABwYEAAAAgWpJhlULhVQLglILgFEK
        flAKe04KeU0Kd0sKdUoKc0kJcEcJbkYJbEQJaUMJZ0EIZUAIYz8IYT0IXzwIXDoIAACxilCxilCxilCx
        iU+xiU+xiU+wiU6wiE2viEyviEyvhkquhkmuhUithEathEasgkSsgkOqgECqfz+pfj6ofTynezqmejil
        eDWfhFsAAAAHBgQIBwUIBwUIBwUIBwUIBwUIBwUIBwUHBgQCAQCddjyEbEkAAAAEAwEWFRSTcT+JVwuH
        VQuFVAuDUwuBUQp+UAp8Tgp6TQp3Swp1SgpzSQlwRwluRglsRAlpQwlnQQhlQAhjPwhgPQhfPAgAALON
        U7KMU7KMU7KMU7KLUrKLUrKLUrGLUbGKULGJT7CJTrCITa+ITK+HS66GSa6FSK2ERqyDRayCQ6uBQaqA
        QKl+Pqh9PKd7OqmJWgEAAAQDAQgHBQgHBQgHBQgHBQgHBQgHBQgHBQcGAwMDAZ55Q1tQPwAAAAAAAIdu
        SY5aDIxYC4pXC4dWC4VUC4NTC4FSC35QCnxOCnpNCndLCnVKCnNJCXBHCW5GCWxECWlDCWdBCGVACGM+
        CGA9CAAAtI9WtI9WtI5VtI5VtI5Vs41Us41Us41Us41TsoxTsotSsYtRsYpQsYlPsIlOr4hMr4dLroZJ
        roVIrYRGrIJEq4FCqoBAqX4+rYZNW1JFCwoIAgEACAcFCAcFCAcFCAcFCAcFCAcFBgUDCQgHmHpMISEf
        AgEAAAAAlnVEkVwMj1oMjVkLilgLiFYLhlULg1MLgVILf1AKfE4Kek0Kd0sKdUoKc0kJcEcJbkYJbEQJ
        aUMJZ0EIZUAIYz4IAAC1kFm1kFm1kFm1kFi1kFi1kFi0j1e0j1e0j1e0j1a0jlWzjVSzjVOyjFOyi1Kx
        i1GxiU+wiU6viEyvhkquhkmthEasgkSrgUK4nnZ2dHJcW1oYFxUBAAAHBgQIBwUIBwUIBwUIBwUGBQMO
        DQxuX0kKCgkEAwEIBwaedDeTXg2RXAyPWgyNWQyKWAuIVguGVQuDUwuBUgt/UAp9Twp6TQp4TAp1Sgpz
        SQlwRwluRglsRAlpQwlnQQhlQAgAALeSXLeSXLeSXLeSXLeSXLaSW7aSW7aRWraRWraRWrWQWbWQWLSP
        V7SPVrONVLONVLKMU7KLUrGKULGJT6+ITK+HS66GSa2ERrigfGloZ3RzcmloZisqKQMCAAUEAggHBQgH
        BQgHBQgHBQkIBgoJBwcGBAAAADQyLJhlGpVgEZNeDZJcDJBbDI1ZDItYC4lWC4ZVC4RUC4FSC39RCn1P
        CnpNCnhMCnVKCnNJCXBHCW5GCWxECWlCCWdBCAAAuJRfuJRfuJRfuJRfuJRfuJRft5Ret5Ret5Ndt5Nd
        t5Ndt5JctpFatpFatZBZtI9XtI9Ws41Us41TsotSsYtRsYlPsIhNtpJbrZ2FZGNibGtqcG9ub25tQ0JB
        DQwKAgEACAcECAcFCAcFCAcFBwYDCAcFAAAAfmtPmWYZl2MWlmESlF4Okl0MkFsMjVkMjFgLiVYLhlUL
        hFQLgVILf1EKfU8Kek0KeEwKdUoKc0kJcEcJbkYJa0QJaUIJAAC5lmK5lmK5lmK5lmK5lmK5lmK5lmK5
        lmG5lmG4lWC4lWC4lF+3lF63k123k122klu2kVq1kFi0j1e0jlWzjVSyjFO5lmK7pIJra2pnZmVpaGdp
        aGdqaWhwb25bWlgjIiADAgAFBAIIBwUIBwUIBwUGBQMEAwKif0qbaR6ZZxqXYxaWYROUXw+SXQyQWwyO
        WgyMWAuJVguGVQuEVAuCUgt/UQp9Twp6TQp4TAp1SgpzSQlwRwluRQlrRAkAALqXZLqYZbqYZbqYZbqY
        ZbqYZbqYZbqYZbqXZLqXZLqXY7qXY7mWYrmWYbiVYLiUX7eTXbeTXbaSW7aRWr2cbMCjeLKiiWdmZWJh
        YGZlZGZlZGZlZGZlZGZlZGppaGhnZkFAPxAPDQIBAAYFAwgHBQEAACIiIKJ1MZ1sIptpHplnGphkFpZh
        E5RfD5JdDJFcDI5aDIxYC4lXC4ZVC4RUC4FSC39RCn1PCnpNCndLCnVKCnNJCXBHCW5FCQAAu5lnvJpn
        vJpnvJpnvJpnvJpnvJpnvJpnvJpnu5lnu5lmu5lmu5lmupdkupdjupdjuZZhuJVgwaR3v6qLm5KGbWxs
        XFtaYF9eY2JhY2JhY2JhY2JhY2JhY2JhY2JhZGNiaWhnW1pZLy4sCgkHAwIAAAAATkc9oHEqn28nnWwi
        m2kemmcbmGUXlmETlWAQkl0MkVwMjloMjFgLiVcLhlULhFQLgVILf1AKfU8Kek0Kd0sKdUoKckgJcEcJ
        AAC9m2m9m2m9nGq9nGq9nGq9nGq9nGq9nGq9nGq9m2m9m2m8m2i8m2i8mme7mWe7mWbCpXm8q5B/fXdb
        W1lXV1VdXFpgYF5gYF5gYF5gYF5gYF5gYF5gYF5gYF5gYF5gX15gX15jY2FlZWNRUE8nJiQAAABaWVii
        cy2hcSqfbyedbCObah+aZxuYZReWYhSVYBCTXQyRXAyOWgyMWAuJVwuGVQuEVAuBUgt/UAp8Tgp6TQp3
        Swp0SgpySAkAAL2da76dbL6ebb6ebb6ebb6ebb6ebb6ebb6ebb6dbL6dbL2da72da72car2bacWqf6Wc
        jFRUUlZWVFxcWlxcWltbWVtbWVxcWl1dW11dW11dW11dW11dW11dW11dW11dW11dW11dW11dW2FhX2Bg
        Xjk5N5mTiKR2MqJ0LqFxKp9vJ55tJJtqH5pnG5hlF5ZiFJVgEJJdDJFcDI5aDIxYC4lXC4ZVC4RUC4FS
        C39QCnxOCnpNCndLCnRJCQAAv55uv59vv59vv6Bwv6Bwv6Bwv6Bwv6Bwv6Bwv6Bwv59vv55uv55uv55u
        vp5tx6+JY2NiVFRSW1tZVVVTV1dVW1tZXFtaU1NRUVFOU1NRWlpYWlpYWlpYWlpYWlpYWlpYWlpYWlpY
        WlpYV1dVT09Nkop+tJBZpXg1pHYyo3UvoXEqn28nnm0knGogmmcbmWUYlmIUlWAQk10MkVwMjloMjFgL
        iVYLhlULg1MLgVILflAKfE4KeU0Kd0sKAADAoHHAoHHAoXLAoXLBonPBonPBonPBonPBonPAoXLAoXLA
        oHHAoHHAoHG/oHDIsI1iYmBTU1FSUk+km4zDr4/Ero7EroyqnoyHg31+fHZWVlRXV1VXV1VXV1VXV1VX
        V1VXV1VXV1VTU1FTU1Gkl4O2k16pfj6nezqmeTakdjKjdS+hciufbyiebSScaiCaZxuZZRiWYhSVYBCT
        XQyRXAyOWgyMWAuJVguGVQuDUwuBUgt+UAp7Tgp4TAoAAMGidMGidMGidMKjdcKjdcKkdsKkdsKkdsKk
        dsKjdcKjdcGidMGidMGidMGic8izlFpaWFJRT01MSryslb6dbL2carybaLyaZ7uZZsOlepWPhE1MSlVU
        UlVUUlVUUlVUUlVUUlJRUFVUUrahhLaSXKyCQ6qAQKl+Pqh8O6Z6N6R3M6N1L6FyK59vKJ5tJJxqIJpo
        HJllGJZiFJVgEJJdDJBbDI1ZDItYC4lWC4ZVC4NTC4FRCn5QCntOCgAAwqR2wqR3wqR3wqR3w6V4w6V4
        w6V4w6V4w6V4w6V4w6V4wqR3wqR3wqR3wqR2u62YTUxLUVBOS0pIt6mVv59vv55uvZ1rvZxqvJtou5ln
        qZ6OSklHUlFQUlFQUlFQUlFQUlFQS0pImJCDuJZir4dLrYRHrIJEqoBAqX4+qHw7pno3pHczo3UvoXIr
        n28onm0knGogmmcbmWUYlmIUlWAQkl0MkFsMjVkMi1gLiFYLhlULg1MLgFEKflAKAADDpXjDpXnEpnrE
        pnrEpnrEp3vEp3vEp3vEp3vEp3vEpnrEpnrEpnrDpXnDpXjKtJRbWllKSUhJSEe/r5jAoXLAoHG/nm6+
        nm29nWvFqH2/rJFLSklOTUxPTk1PTk1PTk1OTUxMS0q8poWyi1KxiU+vh0uuhUisg0WrgUGpfj6ofDum
        ejekdzOjdS+hciufbyiebSScaiCaZxuZZRiWYhSVYBCSXQyQWwyNWQyLWAuIVguFVAuDUwuAUQoAAMSn
        e8Wne8Wne8WofMWofMWofMWofMWofMWofMWofMWofMWofMWofMWne8Sne8y0kXJxcERDQkhHRsCwmcit
        hcGic8Cgcb+gcL+ebseshW1sa0RDQkxLSkxLSkxLSkxLSkxLSkVEQ3d1cr2ecLKLUrGJT6+ITK6FSKyD
        RauBQal+Pqh8O6Z6N6R3M6N1L6FzLJ9vKJ5tJJxqIJpnG5hlF5ZhE5RfD5JdDJBbDI1ZDIpYC4hWC4VU
        C4JSCwAAxah8xal9xal9xql+xqp/xqp/xqp/xqp/xqp/xqp/xqp/xqp/xql+xal9xah8y7GLopqPPj08
        RENCZmVkyrSRwqR2waJ0waJzwKBxx62GfXt3QD8+SUhHSUhHSUhHSUhHSUhHPz49cXBvvqBys41UsotS
        sYlPr4hMroZJrINFq4FBqX8/qHw7pno3pHczo3UvoXIrn28onm0knGogmmcbmGUXlmETlF8Pkl0MkFsM
        jVkMilgLh1YLhVQLAADGqn/Gqn/Gqn/Hq4DHq4HHq4HIrILIrILIrILIrILHq4HHq4HHq4DHq4DGqn/G
        qn+knJE8OzpGRUQ8PDq/sJvDpXnCpHfCpHbBonTAoXLIr4ljYmE9PDtGRURGRURGRUQ/Pj1TUlHCqYPA
        onS1kFi0jlWyi1KxiU+viEyuhkmsg0WrgUKpfz+ofDumejekdzOjdS+hciufbyiebSSbah+aZxuYZReW
        YROUXw+SXQyPWgyNWQuKVwuHVgsAAMergcisgsisgsisgsisg8isg8ithMithMithMithMisg8isg8is
        g8isgsisgsergbSpmTo5OD8+PXNzcZSPh8Sne8SmesOleMKkd8GidMithL2tlzw7Ojs6OUFAPzs6OTw7
        OrenkMGidLeUXraSW7WQWLSOVbKMU7GJT6+ITK6GSayDRauBQql/P6h8O6Z6N6R3M6N1L6FyK59vKJ5t
        JJtqH5pnG5hkFpZhE5ReDpJcDI9aDI1ZC4pXCwAAyKyCyKyDyK2Eya6Fya6Fya6Fya6Fya6Gya6Gya6G
        ya6Fya6Fya6Fya6FyK2EyKyDwrSfNjU0MzIxqaGUxql+xah8xad7xKZ6w6V5wqR3wqN1yK2GtaiVVlVU
        Q0JBVlVUtaeRw6Z6updkuZZht5RetpJbtZBYtI5VsoxTsYlPr4hMroZJrINFq4FCqX8/qHw7pno3pHcz
        o3UvoXIrn28onm0km2ofmmcbmGQWlmETlF4OklwMj1oMjFkLAADJroXJroXJrobKr4fKr4fKsIjKsIjK
        sIjKsIjKsIjKsIjKsIjKr4fKr4fJrobJroXPu55paGg3NjSupZfHq4DGqn/GqX7FqHzEp3vEpnrDpXjC
        pHbIrobJso7GspPIr4rFqX68m2i7mWe6l2S5lmG4lF+3kly1kFi0jlWyjFOxiU+viEyuhkmsg0WrgUGp
        fz+ofDumejekdzOjdS+hciufbyedbCObah+aZxuYZBaWYROTXg2RXAyPWgwAAMqvh8qwiMqwiMqwiMqw
        icuxisuxisuxisuxisuxisuxisuxisqwicqwiMqwiMqwiNC6mcy7obGoms67nsisgsergcergMaqf8Wp
        fcWne8SmesOleMKkd8GidMChcr+gcL+ebr2da7ybaLuZZ7qXZLmWYriUX7eSXLWQWbSOVbKMU7GKUK+I
        TK6GSayDRauBQql/P6h8O6Z6N6R3M6N1L6FyK59vJ51sI5tpHplnGpdjFpZhEpNeDZFcDAAAyrCIyrCJ
        y7GKy7GLy7GLy7GLy7GLzLKMzLKMzLKMzLKMy7GLy7GLy7GLy7GKyrCJyrCIyrCIyq+Hya6Gya6FyKyD
        yKyCx6uBxqp/xal9xah8xKd7w6V5wqR3waJ0waJzwKBxv55uvZ1rvZtpu5lnupdkuZZiuJRft5JctZBZ
        tI5VsoxTsYpQr4hMroZJrYRGq4FCqX8/qHw7pno3pHczo3UvoXIrn28nnWwjm2kemWcal2MWlmESk14N
        AADLsYvLsYvMsozMsozMs43Ns47Ns47Ns47Ns47Ns47Ns47Ns47Ms43Ms43MsozLsYvLsYvLsYrKsInK
        sIjKr4fJroXIrYTIrILHq4HGqn/GqX7FqHzEp3vDpXnCpHfCo3XBonPAoHG/nm69nWu9m2m7mWe6mGW5
        lmK4lF+3kly1kFm0j1ayjFOxilCviEyuhkmthEargUKpfj6ofDumejekdjKjdS+hcSqfbyedbCObaR6Z
        ZxqXYxaVYBEAAMyyjMyzjc2zjs2zjs2zjs20j820j820j820j820j820j820j82zjs2zjs2zjsyzjcyy
        jMuxi8uxi8uxisqwiMqwiMmuhsmuhcisg8isgsergMapfsWofMSne8SmesKkd8KjdcGic8Cgcb+ebr2d
        a72babuZZ7qYZbmWYriUX7eSXLWQWbSPVrKMU7GKUK+ITK6GSa2ERquBQql+Pqh8O6Z6N6R2MqN1L6Fx
        Kp9vJ51sI5tpHplnGpdjFgAAzbOOzbOOzbSPzbWQzrWQzrWQzrWQzrWQzrWQzrWQzrWQzrWQzrWQzbWQ
        zbSPzbSPzbOOzLONzLKMy7GLy7GLyrCJyrCIyq+Hya6FyKyDyKyCx6uAxqp/xah8xad7xKZ6wqR3wqN1
        waJzwKBxv55uvp1svZtpvJpnuphluZZiuJRft5JctZBZtI9WsoxTsYpQr4hMroZJrYRGq4FCqX8/qHw7
        pno3pHYyo3UvoXEqn28nnWwjm2kemWYZAADNtI/NtZDOtZDOtZDOtpHOtpHOtpHPt5LPt5LPt5LOtpHO
        tpHOtpHOtZDOtZDOtZDNtZDNtI/Ns47Ms43MsozLsYvLsYrKsIjKr4fJroXIrYTIrILHq4HGqn/FqX3F
        p3vEpnrCpHfCo3XBonPAoHG/nm6+nWy9m2m8mme6mGW5lmK4lF+3kly1kFm0j1ayjFOxilCviEyuhkmt
        hEargUKpfz+ofDumejekdzOjdS+hcSqfbyedbCKbaR4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA
</value>
  </data>
</root>